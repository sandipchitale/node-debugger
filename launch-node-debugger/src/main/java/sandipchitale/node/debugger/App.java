/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package sandipchitale.node.debugger;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.nio.file.Files;

public class App {

    public static void main(String[] args) {
       new App().run(args);
    }

    private void run(String[] args) {
        try {
            String os = System.getProperty("os.name").toLowerCase();
            boolean isWindows = os.contains("win");
            boolean isMac = os.contains("mac");

            // Locate chrome binary to invoke based on OS
            String chromeBinary;
            if (isWindows) {
                chromeBinary = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe";
            } if (isMac) {
                chromeBinary = "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome";
            } else { //Unix / Linux file path
                chromeBinary = "google-chrome";
            }

            // Launch chrome
            Process chromeProcess = new ProcessBuilder()
                    .command(
                            chromeBinary,
                            "--incognito",
                            "--new-window",
                            "-no-first-run",
                            "--window-position=100,100",
                            "--window-size=700,600",
                            "--user-data-dir=" + Files.createTempDirectory("chrome-user-data-dir").toFile().getAbsolutePath()
                    )
                    .start();
            Robot robot = new Robot();
            robot.delay(500);

            int vkControlOrCommand = KeyEvent.VK_CONTROL;
            if (isMac) {
                vkControlOrCommand = KeyEvent.VK_META;
            }
            robot.keyPress(vkControlOrCommand);
            robot.keyPress(KeyEvent.VK_L);
            robot.keyRelease(KeyEvent.VK_L);
            robot.keyRelease(vkControlOrCommand);

            type(robot, "chrome");
            robot.keyPress(KeyEvent.VK_SHIFT);
            robot.keyPress(KeyEvent.VK_SEMICOLON);
            robot.keyRelease(KeyEvent.VK_SEMICOLON);
            robot.keyRelease(KeyEvent.VK_SHIFT);
            type(robot, "//inspect");

            robot.keyPress(KeyEvent.VK_ENTER);
            robot.keyRelease(KeyEvent.VK_ENTER);

            robot.delay(1000);

            // Show search box
            robot.keyPress(vkControlOrCommand);
            robot.keyPress(KeyEvent.VK_F);
            robot.keyRelease(KeyEvent.VK_F);
            robot.keyRelease(vkControlOrCommand);

            // Search for "Open dedicated..." link on the page
            type(robot, "Open");
            robot.keyPress(KeyEvent.VK_SPACE);
            robot.keyRelease(KeyEvent.VK_SPACE);
            type(robot, "dedicated");

            // Close search box
            robot.keyPress(KeyEvent.VK_ESCAPE);
            robot.keyRelease(KeyEvent.VK_ESCAPE);

            // Activate "Open dedicated..." link
            robot.keyPress(KeyEvent.VK_ENTER);
            robot.keyRelease(KeyEvent.VK_ENTER);

            if (isWindows) {
                robot.delay(1000);

                // Switch back to launching window
                robot.keyPress(KeyEvent.VK_ALT);
                robot.keyPress(KeyEvent.VK_TAB);
                robot.keyRelease(KeyEvent.VK_TAB);
                robot.keyRelease(KeyEvent.VK_ALT);

                robot.delay(1000);
            } if (isMac) {
                robot.delay(1000);

                // Switch back to launching window
                robot.keyPress(KeyEvent.VK_META);
                robot.keyPress(KeyEvent.VK_BACK_QUOTE);
                robot.keyRelease(KeyEvent.VK_BACK_QUOTE);
                robot.keyRelease(KeyEvent.VK_META);

                robot.delay(1000);
            } else { // Linux
                robot.delay(20);
            }

            robot.keyPress(vkControlOrCommand);
            robot.keyPress(KeyEvent.VK_W);
            robot.keyRelease(KeyEvent.VK_W);
            robot.keyRelease(vkControlOrCommand);
        } catch (IOException | AWTException e) {
            System.err.println(e.getMessage());
        }
    }

    private static void type(Robot robot, String s)
    {
        byte[] bytes = s.getBytes();
        for (byte b : bytes)
        {
            int code = b;
            // keycode only handles [A-Z] (which is ASCII decimal [65-90])
            if (code > 96 && code < 123) code = code - 32;
            robot.delay(40);
            robot.keyPress(code);
            robot.keyRelease(code);
        }
    }
}
